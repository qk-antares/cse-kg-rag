多线程（multithreading），是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理或同时多线程处理器。在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。

## 简介
多线程是并行化的一种形式，或者是拆分工作以便同时进行处理。线程化的程序将工作拆分到多个软件线程，而不是将大量工作交给单个内核。这些线程由不同的 CPU 内核并行处理，以节省时间。
根据其构建方式，游戏可能是轻线程的，也可能是重线程的。一些旧游戏引擎以依赖单线程性能而闻名，这意味着它们大多使用单个 CPU 内核，并通过更高的时钟速度来获得大幅度性能提升。
如今，Unreal Engine 4 等游戏引擎都会在创建复杂场景时利用多个内核。引擎还可以使用多线程来处理“绘制调用”（ CPU 向 GPU 发送的关于绘制游戏内对象、纹理和着色器的指令）的不同部分。
在计算机编程中，一个基本的理念就是同时对多个任务加以控制。许多程序设计问题都要求程序能够停下手头的工作，改为处理其他一些问题，再返回主进程，也就是“中断”。可以通过多种途径和方式达到中断的目的。最早，掌握计算机低级编程语言的程序员编写的一些“中断服务例程”，其中主进程的暂停是通过硬件级的中断实现的。尽管这是一种有用的方法，但编出的程序很难移植，由此造成了另一类的代价高昂问题。中断对那些实时性很强的任务来说是很有必要的。但对于其他许多问题，只要求将问题划分进入独立运行的程序片段中，使整个程序能更迅速地响应用户的请求。
原本，线程只是用于分配单个处理器的处理时间的一种工具。但假如操作系统本身支持多个处理器，那么每个线程都可分配给一个不同的处理器，真正进入“并行运算”状态。从程序设计语言的角度看，多线程操作最有价值的特性之一就是程序员不必关心到底使用了多少个处理器。程序在逻辑意义上被分割为数个线程；假如机器本身安装了多个物理处理器或逻辑处理器，那么程序会运行得更快，无需作出任何特殊的调校。根据前面的论述，大家可能感觉多线程处理有利无弊，但必须注意一个问题：共享资源。如果有多个线程同时运行，当它们试图访问相同的资源，就会遇到问题。举个例子来说，两个线程不能将信息同时发送给一台打印机。为解决这个问题，对那些可共享的资源来说（比如打印机），它们在使用期间必须进入锁定状态。所以一个线程可将资源锁定，在完成了它的任务后，再解开（释放）这个锁，使其他线程可以接着使用同样的资源。
多线程(2张)
线程是进程中的一部分，也是进程的的实际运作单位，它也是操作系统中的最小运算调度单位。进程中的一个单一顺序的控制流就是一条线程，多个线程可以在一个进程中并发。可以使用多线程技术来提高运行效率。
多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。

## 原理
实现多线程是采用一种并发执行机制。
并发执行机制原理：简单地说就是把一个处理器划分为若干个短的时间片，每个时间片依次轮流地执行处理各个应用程序，由于一个时间片很短，相对于一个应用程序来说，就好像是处理器在为自己单独服务一样，从而达到多个应用程序在同时进行的效果。
多线程就是把操作系统中的这种并发执行机制原理运用在一个程序中，把一个程序划分为若干个子任务，多个子任务并发执行，每一个任务就是一个线程。这就是多线程程序。
多线程技术不但可以提高交互速度，而且能够更加高效、便捷地进行控制。在对多线程应用的时候，可以使程序响应速度得到提高，从而实现速度化、高效化的特点。另外，多线程技术存在的缺点也比较明显，需要等待比较长的时间之外，还会在一定程度上使程序运行速度降低，使工作效率受到一定的影响，从而对资源造成了浪费。

## 优点
1、使用线程可以把占据时间长的程序中的任务放到后台去处理。
2、用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。
3、程序的运行速度可能加快。
4、在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。在这种情况下可以释放一些珍贵的资源如内存占用等。
5、多线程技术在iOS软件开发中也有举足轻重的作用。

## 缺点
1、如果有大量的线程，会影响性能，因为操作系统需要在它们之间切换。
2、更多的线程需要更多的内存空间。
3、线程可能会给程序带来更多“bug”，因此要小心使用。
4、线程的中止需要考虑其对程序运行的影响。
5、通常块模型数据是在多个线程间共享的，需要防止线程死锁情况的发生。

## 优势
多进程程序结构和多线程程序结构有很大的不同，多线程程序结构相对于多进程程序结构有以下的优势：
1、方便的通信和数据交换
线程间有方便的通信和数据交换机制。对于不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这种方式不仅费时，而且很不方便。线程则不然，由于同一进程下的线程之间共享数据空间，所以一个线程的数据可以直接为其他线程所用，这不仅快捷，而且方便。
2、更高效地利用CPU
使用多线程可以加快应用程序的响应。这对图形界面的程序尤其有意义，当一个操作耗时很长时，整个系统都会等待这个操作，此时程序不会响应键盘、鼠标、菜单的操作，而使用多线程技术，将耗时长的操作置于一个新的线程，就可以避免这种尴尬的情况。
同时，多线程使多CPU系统更加有效。操作系统会保证当线程数不大于CPU数目时，不同的线程运行于不同的CPU上。

## 概念区分
线程与多线程
线程是系统对代码的执行进程，如果将系统当作一个员工，被安排执行某个任务的时候，他不会对任何其他的任务作出响应。只有当这个任务执行完毕，才可以重新给他分配任务。每一个程序都有一个主线程，负责执行程序必要的任务。
当我们处理一个消耗大的任务（如上传或下载图片），如果让主线程执行这个任务，它会等到动作完成，才继续后面的代码。在这段时间之内，主线程处于“忙碌”状态，也就是无法执行任何其他功能。体现在界面上就是，用户的界面完全“卡死”。
多线程是指，将原本线性执行的任务分开成若干个子任务同步执行，这样做的优点是防止线程“堵塞”，增强用户体验和程序的效率。缺点是代码的复杂程度会大大提高，而且对于硬件的要求也相应地提高。

## 应用
至2024年，世界上大多数计算机仍然采用的是冯·诺依曼结构，这种结构的特点就是顺序处理，一个处理器在同个时刻只能处理一件事情。Windows 95/NT采用一种全新的任务调度策略，它把一个进程划分为多个线程，每个线程轮流占用CPU的运算时间，操作系统不断地把线程挂起、唤醒、再挂起、再唤醒，如此反复，由于CPU的速度比较快，给人的感觉是多个线程在同时执行，就好像有多个CPU存在于计算机中一样。
多线程的一个典型例子是：用资源管理器复制文件时，一方面在进行磁盘读写操作，同时一张纸不停地从一个文件夹飘到另一个文件夹，这个飘的动作实际上是一段视频剪辑，也就是说，资源管理器能够同时进行磁盘读写和播放视频剪辑。

## 多线程代码实现
