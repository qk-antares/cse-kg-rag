Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。
Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。

## 发展历程
20世纪90年代，硬件领域出现了单片式计算机系统，这种价格低廉的系统一出现就立即引起了自动控制领域人员的注意，因为使用它可以大幅度提升消费类电子产品（如电视机顶盒、面包烤箱、移动电话等）的智能化程度。Sun公司为了抢占市场先机，在1991年成立了一个称为Green的项目小组，帕特里克、詹姆斯·高斯林、麦克·舍林丹和其他几个工程师一起组成的工作小组在加利福尼亚州门洛帕克市沙丘路的一个小工作室里面研究开发新技术，专攻计算机在家电产品上的嵌入式应用。JAVAJAVA
由于C++所具有的优势，该项目组的研究人员首先考虑采用C++来编写程序。但对于硬件资源极其匮乏的单片式系统来说，C++程序过于复杂和庞大。另外由于消费电子产品所采用的嵌入式处理器芯片的种类繁杂，如何让编写的程序跨平台运行也是个难题。为了解决困难，他们首先着眼于语言的开发，假设了一种结构简单、符合嵌入式应用需要的硬件平台体系结构并为其制定了相应的规范，其中就定义了这种硬件平台的二进制机器码指令系统（即后来成为“字节码”的指令系统），以待语言开发成功后，能有半导体芯片生产商开发和生产这种硬件平台。对于新语言的设计，Sun公司研发人员并没有开发一种全新的语言，而是根据嵌入式软件的要求，对C++进行了改造，去除了留在C++的一些不太实用及影响安全的成分，并结合嵌入式系统的实时性要求，开发了一种称为Oak的面向对象语言。
由于在开发Oak语言时，尚且不存在运行字节码的硬件平台，所以为了在开发时可以对这种语言进行实验研究，他们就在已有的硬件和软件平台基础上，按照自己所指定的规范，用软件建设了一个运行平台，整个系统除了比C++更加简单之外，没有什么大的区别。1992年的夏天，当Oak语言开发成功后，研究者们向硬件生产商进行演示了Green操作系统、Oak的程序设计语言、类库和其硬件，以说服他们使用Oak语言生产硬件芯片，但是，硬件生产商并未对此产生极大的热情。因为他们认为，在所有人对Oak语言还一无所知的情况下，就生产硬件产品的风险实在太大了，所以Oak语言也就因为缺乏硬件的支持而无法进入市场，从而被搁置了下来。
1994年6、7月间，在经历了一场历时三天的讨论之后，团队决定再一次改变了努力的目标，这次他们决定将该技术应用于万维网。他们认为随着Mosaic浏览器的到来，因特网正在向同样的高度互动的远景演变，而这一远景正是他们在有线电视网中看到的。作为原型，帕特里克·诺顿写了一个小型万维网浏览器WebRunner。
1995年，互联网的蓬勃发展给了Oak机会。业界为了使死板、单调的静态网页能够“灵活”起来，急需一种软件技术来开发一种程序，这种程序可以通过网络传播并且能够跨平台运行。于是，世界各大IT企业为此纷纷投入了大量的人力、物力和财力。这个时候，Sun公司想起了那个被搁置起来很久的Oak，并且重新审视了那个用软件编写的试验平台，由于它是按照嵌入式系统硬件平台体系结构进行编写的，所以非常小，特别适用于网络上的传输系统，而Oak也是一种精简的语言，程序非常小，适合在网络上传输。Sun公司首先推出了可以嵌入网页并且可以随同网页在网络上传输的Applet（Applet是一种将小程序嵌入到网页中进行执行的技术），并将Oak更名为Java。5月23日，Sun公司在Sun world会议上正式发布Java和HotJava浏览器。IBM、Apple、DEC、Adobe、HP、Oracle、Netscape和微软等各大公司都纷纷停止了自己的相关开发项目，竞相购买了Java使用许可证，并为自己的产品开发了相应的Java平台。
1996年1月，Sun公司发布了Java的第一个开发工具包（JDK 1.0），这是Java发展历程中的重要里程碑，标志着Java成为一种独立的开发工具。9月，约8.3万个网页应用了Java技术来制作。10月，Sun公司发布了Java平台的第一个即时（JIT）编译器。
1997年2月，JDK 1.1面世，在随后的3周时间里，达到了22万次的下载量。4月2日，Java One会议召开，参会者逾一万人，创当时全球同类会议规模之纪录。9月，Java Developer Connection社区成员超过10万。
1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应用于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及。
1999年4月27日，HotSpot虚拟机发布。HotSpot虚拟机发布时是作为JDK 1.2的附加程序提供的，后来它成为了JDK 1.3及之后所有版本的Sun JDK的默认虚拟机。
2000年5月，JDK1.3、JDK1.4和J2SE1.3相继发布，几周后其获得了Apple公司Mac OS X的工业标准的支持。2001年9月24日，J2EE1.3发布。2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升，与J2SE1.3相比，其多了近62%的类和接口。在这些新特性当中，还提供了广泛的XML支持、安全套接字（Socket）支持（通过SSL与TLS协议）、全新的I/OAPI、正则表达式、日志与断言。2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5更名为Java SE 5.0（内部版本号1.5.0），代号为“Tiger”，Tiger包含了从1996年发布1.0版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、格式化I/O及可变参数。Java创始人之一：詹姆斯·高斯林Java创始人之一：詹姆斯·高斯林
2005年6月，在Java One大会上，Sun公司发布了Java SE 6。此时，Java的各种版本已经更名，已取消其中的数字2，如J2EE更名为JavaEE，J2SE更名为JavaSE，J2ME更名为JavaME。
2006年11月13日，Java技术的发明者Sun公司宣布，将Java技术作为免费软件对外发布。Sun公司正式发布的有关Java平台标准版的第一批源代码，以及Java迷你版的可执行源代码。从2007年3月起，全世界所有的开发人员均可对Java源代码进行修改。
2009年，甲骨文公司宣布收购Sun。
2010年，Java编程语言的共同创始人之一詹姆斯·高斯林从Oracle公司辞职。2011年，甲骨文公司举行了全球性的活动，以庆祝Java7的推出，随后Java7正式发布。
2014年，甲骨文公司发布了Java8正式版。
2017 年 9 月 22 日，Java 9正式发布，带来了很多新特性，其中最主要的变化是已经实现的模块化系统。
2024年3月20日，甲骨文正式发布Java 22。Java 22 (Oracle JDK 22) 在性能、稳定性和安全性方面进行了数千种改进，包括对Java语言、其API和性能，以及Java开发工具包（JDK）中工具的增强功能，以帮助开发人员提高工作效率。

## 编程开发

### 编程环境
JDK（Java Development Kit）称为Java开发包或Java开发工具，是一个编写Java的Applet小程序和应用程序的程序开发环境。JDK是整个Java的核心，包括了Java运行环境（Java Runtime Environment），一些Java工具和Java的核心类库（Java API）。不论什么Java应用服务器实质都是内置了某个版本的JDK。主流的JDK是Sun公司发布的JDK，除了Sun之外，还有很多公司和组织都开发了自己的JDK，例如，IBM公司开发的JDK，BEA公司的Jrocket，还有GNU组织开发的JDK。Java概念图
另外，可以把Java API类库中的Java SE API子集和Java虚拟机这两部分统称为JRE（Java Runtime Environment），JRE是支持Java程序运行的标准环境。
JRE是个运行环境，JDK是个开发环境。因此写Java程序的时候需要JDK，而运行Java程序的时候就需要JRE。而JDK里面已经包含了JRE，因此只要安装了JDK，就可以编辑Java程序，也可以正常运行Java程序。但由于JDK包含了许多与运行无关的内容，占用的空间较大，因此运行普通的Java程序无须安装JDK，而只需要安装JRE即可。

### 编程工具
Eclipse：一个开放源代码的、基于Java的可扩展开发平台。
NetBeans：开放源码的Java集成开发环境，适用于各种客户机和Web应用。
IntelliJ IDEA：在代码自动提示、代码分析等方面的具有很好的功能。
MyEclipse：由Genuitec公司开发的一款商业化软件，是应用比较广泛的Java应用程序集成开发环境。
EditPlus：如果正确配置Java的编译器“Javac”以及解释器“Java”后，可直接使用EditPlus编译执行Java程序。

## 语言特点

### 简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。

### 面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。

### 分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。

### 编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。

### 稳健性
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。JavaJava
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。

### 安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。

### 可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。

### 高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。

### 多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线程的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线程、运行线程、停止线程和检查线程状态的方法。
Java的线程支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。

### 动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。

## 工作原理
由四方面组成：工作原理工作原理
（1）Java编程语言
（2）Java类文件格式
（3）Java虚拟机
（4）Java应用程序接口
当编辑并运行一个Java程序时，需要同时涉及到这四种方面。使用文字编辑软件（例如记事本、写字板、UltraEdit等）或集成开发环境（Eclipse、MyEclipse等）在Java源文件中定义不同的类，通过调用类（这些类实现了Java API）中的方法来访问资源系统，把源文件编译生成一种二进制中间码，存储在class文件中，然后再通过运行与操作系统平台环境相对应的Java虚拟机来运行class文件，执行编译产生的字节码，调用class文件中实现的方法来满足程序的Java API调用。

## 语言基础

### 基本数据结构
在Java中有8种数据类型来存储数值、字符和布尔值。
整数类型
整数型用来存储整数数值，即没有小数部分的数值。可以是正数，也可以是负数。整数数据在Java程序中有3种表示形式，分别为十进制、八进制和十六进制。
整型数据根据它所占内容大小的不同可分为4种类型。
数据类型
内存
byte
8位
short
16位
int
32位
long
64位
浮点类型
数据类型
内存
float
32位
double
64位
字符类型
字符类型用于存储单个字符，占用16位（两个字节）的内存空间。在定义字符型变量时，要以单引号表示。使用char关键字可定义字符变量。
数据类型
内存
char
16位
布尔类型
布尔类型又称逻辑类型，通过关键字boolean来定义布尔类型变量，只有只有true和false两个取值，分别代表布尔逻辑中的“真”和“假”。布尔类型通常被用在流程控制中作为判断条件。

### 关键字
关键字
含义
abstract
抽象类或方法
assert
用来查找内部程序错误
break
跳出一个switch或循环
byte
8位整数类型
case
switch的一个分支
catch
捕获异常的try块子句
class
定义一个类类型
continue
在循环末尾继续
default
switch的缺省语句
do
do/while循环最前面的语句
double
双精度浮点数类型
else
if语句的else子句
enum
枚举类型
extends
定义一个类的父类
final
一个常量，或不能覆盖的一个类或方法
finally
try块中总会执行的部分
float
单精度浮点数类型
for
一个循环类型
if
一个条件语句
implements
定义一个类实现的接口
import
导入一个包
instanceof
测试一个对象是否是某个类的实例
int
32位整型数
interface
接口，一种抽象类型，仅有方法和常量的定义
long
64位长整数型
native
由宿主系统实现的一个方法
new
分配新的类实例
null
一个空引用
package
包含类的一个包
private
表示私有字段，或者方法等，只能从类内部访问
protected
表示保护类型字段
public
表示共有属性或者方法
return
从一个方法中返回
short
16位整数类型
static
这个特性是这个类特有的，而不属于这个类的对象
strictfp
对浮点数计算使用严格的规则
super
超类对象或构造函数
switch
选择语句
synchronized
对线程而言是原子的方法或代码块
this
当前类的一个方法或构造函数的隐含参数
throw
抛出一个异常
throws
一个方法可能抛出的异常
transient
标志非永久性的数据
try
捕获异常的代码块
void
标记方法不返回任何值
volatile
标记字段可能会被多个线程同时访问，而不做同步
while
一种循环
关键字参考资料来源

### 运算符
运算符是一些特殊的符号，主要用于数学函数、一些类型的赋值语句和逻辑比较方面。
赋值运算符
赋值运算符以符号“=”表示，它是一个二元运算符（对两个操作数作处理），其功能是将右方操作数所含的值赋给左方的操作数。
例如：
算术运算符
运算符
说明
+
加
-
减
*
乘
/
除
%
取余数
自增和自减运算符
自增和自减是单目运算符，可以放在操作元之前，也可以放在操作元之后。操作元必须是一个整型或浮点型变量。自增、自减运算符的作用是使变量的值增1或减1。放在操作元前面的自增、自减运算符，会先将变量的值加1或减1，然后再使该变量参与表达式的运算。放在操作元后面的自增、自减运算符，会先使变量参与表达式的运算，然后再将该变量的值加1或减1。
例如：
假设a=5
比较运算符
比较运算符属于二元运算符，用于程序中的变量之间，变量和自变量之间以及其他类型的信息之间的比较。比较运算符的运算结果是boolean型。当运算符对应的关系成立时，运算的结果为true，否则为false。比较运算符共有6个，通常作为判断的依据用于条件语句中。
运算符
说明
>
比较左方是否大于右方
<
比较左方是否小于右方
==
比较左方是否等于右方
> =
比较左方是否大于等于右方
<=
比较左方是否小于等于右方
！=
比较左方是否不等于右方
逻辑运算符
运算符
作用
&&
逻辑与
||
逻辑或
！
逻辑非
语言基础参考资料来源

### 程序举例
main方法，正如注释所说，这是程序开始执行的第一行。对于一个Java应用程序来说，main方法是必需的，Java解释器在没有生成任何对象的情况下，以main作为入口来执行程序。每个类中可以定义多个方法，但main方法只能有一个。关键字public表示访问权限，指明所有的类都可以使用这一方法。本例中，main必须被定义为public类型，因为当程序开始执行时它需要被它的类之外的代码调用。关键字static指明该方法是一个类方法。关键字void指明main()方法不返回任何值。main方法圆括号中定义的String args[]是传送给main方法的参数，参数名为args，它是类String的一个对象。方法的参数用“类名参数名”来指定，多个参数间用逗号分隔。该行的最后一个字符是“{”，它表示了main程序体的开始，一个方法中包含的所有代码都将包括在这对花括号中间。另外，main仅是解释器开始工作的地方，一个复杂的程序可能包含几十个类，但这些类仅需要一个main方法。

## 语言标准
1997年11月17日，国际标准化组织（ISO）同意采纳Sun公司的专利技术——Java作为ISO标准。Java作为一个技术标准供公众无偿使用。根据ISO的批准，Sun公司将可提交Java的标准化平台规范。
发布时间
名称
2000年11月15日
ISO/TS 10303-27:2000
2006年5月15日
ISO/IEC 19777-2:2006
2014年7月15日
ISO/IEC TR 13066-6:2014
2015年8月15日
ISO 20210:2015
2016年3月15日
ISO/IEC 30106-2:2016
语言标准参考资料

## 语言规范
JCP（Java Community Process）是一个开放的国际组织，主要由Java开发者以及被授权者组成，职能是发展和更新Java技术规范、参考实现（RI）、技术兼容包（TCK）。
JCP维护的规范包括Java ME、Java SE、Java EE、XML、OSS、JAIN等。组织成员可以提交JSR（Java Specification Requests），通过特定程序以后，进入到下一版本的规范里面。
JSR是早期提议和最终发布的Java平台规范的具体描述。通常，一个新的JSR的提出是为了增加或者规范Java平台的功能。某个具体的JSR由专家组共同来制定，工作由组长协调。例如，CLDC1.0（Connected Limited Device Configuration，JSR30）由Sun公司的Antero Taivalsaari担任组长，同时专家组的成员还包括Siemens、Motorola、Nokia、Symbian等。Java ME平台规范是在JSR68中定义的，规范组长是Sun公司的Jon Courtney。
JSR完成后，相关的规范及JavaAPI会在JCP的官方网站发布。设备制造商可以在自己的产品中实现某个JSR，如MIDP2.0（JSRll8）。但是这些都必须要通过TCK（Technology Compatibility Kit）测试以确保技术兼容性。
按照技术类别可以分成以下几类：
1、J2EE平台规范
2、J2SE平台规范
3、J2ME平台规范
4、运营支持系统规范（OSS）
5、综合网络的Java 应用（JAIN）
6、XML 操作规范

## 技术应用

### Android应用
许多的Android应用都是Java程序员开发者开发。虽然 Android运用了不同的JVM以及不同的封装方式，但是代码还是用Java语言所编写。相当一部分的手机中都支持Java游戏，这就使很多非编程人员都认识了Java。

### 在金融业应用的服务器程序
Java在金融服务业的应用非常广泛，很多第三方交易系统、银行、金融机构都选择用Java开发，因为相对而言，Java较安全。大型跨国投资银行用Java来编写前台和后台的电子交易系统，结算和确认系统，数据处理项目以及其他项目。大多数情况下，Java被用在服务器端开发，但多数没有任何前端，它们通常是从一个服务器（上一级）接收数据，处理后发向另一个处理系统（下一级处理）。

### 网站
Java 在电子商务领域以及网站开发领域占据了一定的席位。开发人员可以运用许多不同的框架来创建web项目，SpringMVC，Struts2.0以及frameworks。即使是简单的 servlet，jsp和以struts为基础的网站在政府项目中也经常被用到。例如医疗救护、保险、教育、国防以及其他的不同部门网站都是以Java为基础来开发的。

### 嵌入式领域
Java在嵌入式领域发展空间很大。在这个平台上，只需130KB就能够使用Java技术（在智能卡或者传感器上）。

### 大数据技术
Hadoop以及其他大数据处理技术很多都是用Java，例如Apache的基于Java的HBase和Accumulo以及 ElasticSearchas。

### 高频交易的空间
Java平台提高了这个平台的特性和及时编译，他同时也能够像 C++ 一样传递数据。正是由于这个原因，Java成为的程序员编写交易平台的语言，因为虽然性能不比C++，但开发人员可以避开安全性，可移植性和可维护性等问题。

### 科学应用
Java在科学应用中是很好选择，包括自然语言处理。最主要的原因是因为Java比C++或者其他语言相对其安全性、便携性、可维护性以及其他高级语言的并发性更好。

## 学习指南

### 考试
Sun公司的Java认证共有以下四种：Java程序员（SCJP）、Java开发员（SCJD）、Java Web组件的开发（SCWD）和Java2企业级设计师企业级技术（SCJA）。中国开展较为普遍的Java认证考试为前两种，其中，Java程序员的认证考试以Sun公司指定的JavaSL-275为教材，考试号为310-025。Java开发员的认证考试以Sun指定的JavaSL-285为教材，机考部分的考试号为310-027。
Sun Certified Java Programmer（SCJP）
Java 程序员认证，测试Java 程序设计的要领和能力，内容侧重于Java 的语法及JDK（Java Development Kit）。
Sun Certified Java Developer（SCJD）
Java 开发员认证，进一步测试用Java 开发应用程序的能力。必须先完成一个程序设计的项目后，再回答与此项目相关的几个问题。
Sun Certified Web Component Developer for Java 2Platform Enterprise Edition（SCWD）
Web 组件开发员认证，测试技术人员对Java Servlets 和JSP（Java Server Page）的程序开发技巧。
Sun Certified Enterprise Architect for J2EE Technology（SCAJ）
Java2 企业级设计师认证是Java 最高级的认证，测试对J2EE 架构及其他系统整合的相关技术经验及能力。
Sun公司定制的Java程序员课程的标准课件的培训期为5天（30个学时）。培训期间，讲师使用Sun公司指定教材，全面系统地讲述课程的内容，并根据各知识点所需要掌握的深度，有层次、有重点、有目的地指导学员的学习。同时，对各种题型的分析和讲解更能帮助学员直观、准确地了解java认证考试。

### 教材
《Java从入门到精通（第3版）》：从初学者角度出发，通过通俗易懂的语言、丰富多彩的实例，详细介绍了使用Java语言进行程序开发需要掌握的知识。
《Java编程语言（第3版）》：该书向熟悉基本编程概念的人讲述Java编程语言。该书解释了Java语言，但不是晦涩的正式介绍，也没有覆盖Java语言的所有方面。
《疯狂Java讲义》：该书深入介绍了Java编程的相关方面，全书内容覆盖了Java的基本语法结构、Java的面向对象特征、Java集合框架体系、Java泛型、异常处理、Java GUI编程、JDBC数据库编程、Java注释、Java的IO流体系、Java多线程编程、Java网络通信编程和Java反射机制。
《Java编程思想（第4版）》：以JDK5.0为基础，在第3版的基础上，添加了新的语言特性，并且对第3版的结构进行了调整，使得所有章节的安排更加遵照循序渐进的特点，同时每一章的内容在分量上也都更加均衡，这使读者能够更加容易地阅读本书并充分了解每章所讲述的内容。
《Java经典实例（第2版）》：本书囊括了许多有用的信息。然而，由于所涉及的主题广泛，不可能对所有主题都进行详尽地阐述。因此，本书还提供了相关的web站点与参考书籍。这也是为了本书的目标读者：想学习更多Java的人。
《Java语言程序设计》：该书是清华大学出版社《普通高校本科计算机专业特色教材精选》丛书之一，也是普通高等教育“十一五” 国家级规划教材。该教材以培养应用型计算机人才为目标，立足课程改革和教材创新，在总结作者多年来从事Java语言教学工作经验的基础上形成了教材的核心内容。本教材可为普通高等院校计算机专业学生学习使用，也适用于自学。
《Java编程方法论》：该书从多个视角对Java编程进行了系统的介绍，并通过向读者呈现出优秀设计，为读者更深入、更全面地了解和掌握Java编程设计思想与技巧提供了有效的借鉴，既可以供有Java编程基础的爱好者进行学习,也可作为Java开发工程师的参考书籍。

## 语言评价

### 发展前景
计算机的诞生及广泛应用推动了IT领域的发展，但21世纪的计算机早已不是访问INTERNET的唯一的途径。各类更具信息化的电子产品逐渐进入IT领域，推动了PC时代的大发展。由于各种消费信息的急剧增加，传统的客户机的各方面条件均不如PC，PC的发展对服务器的应用管理体统也提出了更高标准。Java语言完全满足了PC的条件，在减少内存，直接在各类电子产品中运行，在网络中可被任何设备所识别，充分利用网络资源等方面有所突破创新，为PC时代的发展创造了有力条件。JavaJava
随着IT产业的发展，许多企业中的计算机应用程序也在随之转型，企业中所应用的计算机模式逐渐向客户端较小、服务器随之增大、数据库的容量也在相应增加的方向转变。此外，加上Java语言独有的特点，根据其在各项服务器中应用程序的开发所占有的优势，企业版的J2SE为企业环境中计算机模式的应用提供了良好的平台。
Java语言为与数据库联系紧密设计了Java servlet和SQL-J技术，以及JSP技术。随着JSP技术的发展，使Java语言的网络应用更为实际化、更高效快捷，成为IT产业常用的技术。JSP以Java语言作为其服务器端的使用语言，结合了Java Script等多种其他客户端语言，使网络浏览器更为方便的展现。
在远程网络教学方面，由于Java改变了传统的基于Microsoft Front Page或HTML语言制作的Web页面形态，使网络远程教学更加朝着动态、便捷化、安全化的方向发展，丰富了网络远程教学的手段和覆盖面。

### 贡献及影响力
Java 语言是一门随时代快速发展的计算机语言程序，其深刻展示了程序编写的精髓，加上其简明严谨的结构及简洁的语法编写为其将来的发展及维护提供了保障。由于提供了网络应用的支持和多媒体的存取，会推动Internet和企业网络的Web的应用。另外，为了保持Java的增长和推进Java社区的参与，Sun公司在Java One开发者大会上宣布开放Java核心源代码，以鼓励更多的人参与到Java社团活动中。来自Java社团和IBM等全球技术合作伙伴两方面的支持，Java技术在创新和社会进步上继续发挥强有力的重要作用，并且随着其程序编写难度的降低使得更多专业人员将精力放置于Java语言的编写与框架结构的设计中。
