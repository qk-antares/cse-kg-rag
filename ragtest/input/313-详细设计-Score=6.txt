详细设计，是软件工程中软件开发的一个步骤，就是对概要设计的一个细化，就是详细设计每个模块实现算法，所需的局部结构。在详细设计阶段，主要是通过需求分析的结果，设计出满足用户需求的软件系统产品。

## 主要任务
详细设计的主要任务是设计每个模块的实现算法、所需的局部数据结构。详细设计的目标有两个：实现模块功能的算法要逻辑上正确和算法描述要简明易懂。

## 方法
传统软件开发方法的详细设计主要是用结构化程序设计法。
结构化程序设计
基本要求要点
a.采用自顶向下、逐步求精的程序设计方法
b.使用三种基本程序控制结构构造程序
(1).用顺序方式对过程分解，确定各部分的执行顺序。
(2).用选择方式对过程分解，确定某个部分的执行条件。
(3).用循环方式对过程分解，确定某个部分重复的开始和结束的条件。
c.主程序员组的组织形式。
Jackson方法
设计步骤
a.分析并确定输入/出数据的逻辑结构，并用Jackson结构图表示这些数据结构。
b.找出输入数据结构和输出数据结构中有对应关系的数据单元。
c.按一定的规则由输入、输出的数据结构导出程序结构。
d.列出基本操作与条件，并把它们分配到程序结构图的适当位置。
e.用伪码写出程序。
描述方法
a.程序流程图
b.PAD图
C.过程设计语言

## 设计工具
表示工具
详细设计的表示工具有图形工具和语言工具。
1．图形工具
利用图形工具可以把过程的细节用图形描述出来。
有业务流图、程序流程图、PAD图（Problem Analysis Diagram）、NS流程图（由 Nassi和 Shneidermen开发，简称 NS）。
（1）程序流程图。程序流程图又称为程序框图，是使用最广泛然而也是用得最混乱的一种描述程序逻辑结构的工具。它用方框表示一个处理步骤，菱形表示一个逻辑条件，箭头表示控制流向。其优点是：结构清晰，易于理解，易于修改。缺点是：只能描述执行过程而不能描述有关的数据。
（2）盒图。盒图是一种强制使用结构化构造的图示工具，也称为方框图。其具有以下特点：功能域明确、不可能任意转移控制、很容易确定局部和全局数据的作用域、很容易表示嵌套关系及模板的层次关系。
（3）PAD图。PAD是一种改进的图形描述方式，可以用来取代程序流程图，比程序流程图更直观，结构更清晰。最大的优点是能够反映和描述自顶向下的历史和过程。PAD提供了5种基本控制结构的图示，并允许递归使用。
PAD的特点有：使用PAD符号设计出的程序代码是结构化程序代码；PAD所描绘的程序结构十分清晰；用PAD图表现程序的逻辑易读、易懂和易记；容易将PAD图转换成高级语言源程序自动完成；即可以表示逻辑，也可用来描绘数据结构；支持自顶向下方法的使用。
2．表格工具
可以用一张表来描述过程的细节，在这张表中列出了各种可能的操作和相应的条件。
3．语言工具
用某种高级语言（称之为伪码）来描述过程的细节。概要设计和详细设计的区别与联系。
有伪码和PDL（Program Design Language）等。
PDL。PDL也可称为伪码或结构化语言，它用于描述模块内部的具体算法，以便开发人员之间比较精确地进行交流。语法是开放式的，其外层语法是确定的，而内层语法则不确定。外层语法描述控制结构，它用类似于一般编程语言控制结构的关键字表示，所以是确定的。内层语法描述具体操作，考虑到不同软件系统的实际操作种类繁多，内层语法因而不确定，它可以按系统的具体情况和不同的设计层次灵活选用，实际上任意英语语句都可用来描述所需的具体操作。用它来描述详细设计，工作量比画图小，又比较容易转换为真正的代码。
PDL的优点：可以作为注释直接插在源程序中；可以使用普通的文本编辑工具或文字处理工具产生和管理；已经有自动处理程序存在，而且可以自动由PDL生成程序代码。
PDL的不足：不如图形工具形象直观，描述复杂的条件组合与动作间对应关系时，不如判定树清晰简单。

## 基本任务
(1)为每个模块进行详细的算法设计。用某种图形、表格、语言等工具将每个模块处理过程的详细算法描述出来。
(2)为每个模块内的数据结构进行设计。对于需求分析、概要设计确定的概念性的数据类型进行确切的定义。
(3)为数据结构进行物理设计，即确定数据库的物理结构。物理结构主要指数据库的存储记录格式、存储记录安排和存储方法，这些都依赖于具体所使用的数据库系统。
(4)其他设计：根据软件系统的类型，还可能要进行以下设计：
①代码设计。为了提高数据的输入、分类、存储、检索等操作，节约内存空间，对数据库中的某些数据项的值要进行代码设计。
②输入/输出格式设计。
③人机对话设计。对于一个实时系统，用户与计算机频繁对话，因此要进行对话方式、内容、格式的具体设计。
(5)编写详细设计说明书。
(6)评审。对处理过程的算法和数据库的物理结构都要评审。

### 区别
软件设计采用自顶向下、逐次功能展开的设计方法，首先完成总体设计，然后完成各有机组成部分的设计。
根据工作性质和内容的不同，软件设计分为概要设计和详细设计。概要设计实现软件的总体设计、模块划分、用户界面设计、数据库设计等等；详细设计则根据概要设计所做的模块划分，实现各模块的算法设计，实现用户界面设计、数据结构设计的细化，等等。

### 联系
概要设计是详细设计的基础，必须在详细设计之前完成，概要设计经复查确认后才可以开始详细设计。概要设计，必须完成概要设计文档，包括系统的总体设计文档、以及各个模块的概要设计文档。每个模块的设计文档都应该独立成册。
详细设计必须遵循概要设计来进行。详细设计方案的更改，不得影响到概要设计方案；如果需要更改概要设计，必须经过项目经理的同意。详细设计，应该完成详细设计文档，主要是模块的详细设计方案说明。和概要设计一样，每个模块的详细设计文档都应该独立成册。
概要设计里面的数据库设计应该重点在描述数据关系上，说明数据的来龙去脉，在这里应该结合我们的一下结果数据，说明这些结果数据的源点，我们这样设计的目 的和原因。详细设计里的数据库设计就应该是一份完善的数据结构文档，就是一个包括类型、命名、精度、字段说明、表说明等内容的数据字典。
概要设计里的功能应该是重点在功能描述，对需求的解释和整合，整体划分功能模块，并对各功能模块进行详细的图文描述，应该让读者大致了解系统做完后大体的 结构和操作模式。详细设计则是重点在描述系统的实现方式，各模块详细说明实现功能所需的类及具体的方法函数，包括涉及到的sql语句等。

## 说明书
1、引言
1.1、编写目的　说明编写这份详细设计说明书的目的，指出预期的读者。
1.2、背景说明：
a． 待开发软件系统的名称；
b． 本项目的任务提出者、开发者、用户和运行该程序系统的计算中心。
1.3、定义　列出本文件中用到专门术语的定义和外文首字母组词的原词组。
1.4、参考资料
列出有关的参考资料，如：
a． 本项目的经核准的计划任务书或合同、上级机关的批文；
b． 属于本项目的其他已发表的文件；
c． 本文件中各处引用到的文件资料，包括所要用到的软件开发标准。列出这些文件的标题、文件编号、发表日期和出版单位，说明能够取得这些文件的来源。
2、程序系统的结构
用一系列图表列出本程序系统内的每个程序（包括每个模块和子程序）的名称、标识符和它们之间 的层次结构关系。
3、程序1（标识符）设计说明
从本章开始，逐个地给出各个层次中的每个程序的设计考虑。以下给出的提纲是针对一般情况的。对于一个具体的模块，尤其是层次比较低的模块或子程序，其很多条目的内容往往与它所隶属的上一层 模块的对应条目的内容相同，在这种情况下，只要简单地说明这一点即可。
3.1、程序描述
给出对该程序的简要描述，主要说明安排设计本程序的目的意义，并且，还要说明本程序的特点（如 是常驻内存还是非常驻？是否子程序？是可重入的还是不可重入的？有无覆盖要求？是顺序处理还是并发处理等）。
3.2、功能
说明该程序应具有的功能，可采用IPO图（即输入一处理一输出图）的形式。
3.3、性能
说明对该程序的全部性能要求，包括对精度、灵活性和时间特性的要求。
3.4、输入项
给出对每一个输入项的特性，包括名称、标识、数据的类型和格式、数据值的有效范围、输入的方式。数量和频度、输入媒体、输入数据的来源和安全保密条件等等。
3.5、输出项
给出对每一个输出项的特性，包括名称、标识、数据的类型和格式，数据值的有效范围，输出的形式、数量和频度，输出媒体、对输出图形及符号的说明、安全保密条件等等。
3.6、算法
详细说明本程序所选用的算法，具体的计算公式和计算步骤。
3.7、流程逻辑
用图表（例如流程图、判定表等）辅以必要的说明来表示本程序的逻辑流程。
3.8、接口
用图的形式说明本程序所隶属的上一层模块及隶属于本程序的下一层模块、子程序，说明参数赋值和调用方式，说明与本程序相直接关联的数据结构（数据库、数据文卷）。
3.9、存储分配
根据需要，说明本程序的存储分配。
3.10、注释设计
说明准备在本程序中安排的注释，如：
a． 加在模块首部的注释；
b． 加在各分枝点处的注释；
c． 对各变量的功能、范围、缺省条件等所加的注释；
d． 对使用的逻辑所加的注释等等。
3.11、限制条件
说明本程序运行中所受到的限制条件。
3.12、测试计划
说明对本程序进行单体测试的计划，包括对测试的技术要求、输入数据、预期结果、进度安排、人员职责、设备条件驱动程序及桩模块等的规定。
3.13、尚未解决的问题
说明在本程序的设计中尚未解决而设计者认为在软件完成之前应解决的问题。
4、程序2（标识符）设计说明
用类似F．3的方式，说明第2个程序乃至第N个程序的设计考虑。
